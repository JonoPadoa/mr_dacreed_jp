// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Course {
    id          String   @id @default(cuid())
    title       String
    description String
    userId      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    questions   CourseQuestion[] 
}
model CourseHeader {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    title       String
    subHeading  String
    description String
    userId      String
    user        User     @relation(fields: [userId], references: [id])
}
model CourseQuestion {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    question  String
    answer1   String
    answer2   String
    answer3   String?
    answer4   String?
    answer5   String?
    answer6   String?
    commentary   String?
    guidance  String?
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    course    Course   @relation(fields: [id], references: [id])
   
}
// TODO: to remove
model QuestionSection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    question  String
    answer1   String
    answer2   String
    answer3   String?
    answer4   String?
    answer5   String?
    answer6   String?
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}
// TODO: to remove
model TestString {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    testInput String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}
model Library {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    topics          Topic[]
    testStrings     TestString[]
    courseQuestions CourseQuestion[]
    CourseHeaders   CourseHeader[]
    course          Course[]
    questionSection QuestionSection[]
}
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}
// TODO: to remove
model Topic {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    notes     Note[]
}
// TODO: to remove
model Note {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String
    topic     Topic    @relation(fields: [topicId], references: [id])
    topicId   String
}